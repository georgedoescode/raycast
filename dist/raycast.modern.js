var t=r("colinear"),n=r("parallel"),e=r("none");function s(s,o,a,i,u,c,y,x){var l=(x-c)*(a-s)-(y-u)*(i-o),h=(y-u)*(o-c)-(x-c)*(s-u),g=(a-s)*(o-c)-(i-o)*(s-u);if(0==l)return 0==h&&0==g?t:n;var p,f,b=h/l,m=g/l;return b>=0&&b<=1&&m>=0&&m<=1?(p={x:s+b*(a-s),y:o+b*(i-o)},(f=r("intersecting")).point=p,f):e}function r(t){return{type:t}}class o{constructor(t){this.uniquePoints=[],this.uniqueAngles=[],this.setSegments(t)}setSegments(t){const n=t.reduce((t,n)=>{for(const e of Object.values(n))t.some(t=>t.x===e.x&&t.y===e.y)||t.push(n.a,n.b);return t},[]),e=t.reduce((n,e)=>{for(const r of t){const t=s(e.a.x,e.a.y,e.b.x,e.b.y,r.a.x,r.a.y,r.b.x,r.b.y);"intersecting"!==t.type||n.some(n=>n.x===t.point.x&&n.y!==t.point.y)||n.push({x:t.point.x,y:t.point.y})}return n},[]);this.uniquePoints=[...e,...n],this.segments=t}createRay(t,n,e){return{a:{x:t,y:n},b:{x:t+Math.cos(e),y:n+Math.sin(e)}}}getIntersection(t,n){const e=t.a.x,s=t.a.y,r=t.b.x-t.a.x,o=t.b.y-t.a.y,a=n.a.y,i=n.b.x-n.a.x,u=n.b.y-n.a.y;if(r*u==o*i)return null;const c=(r*(a-s)+o*(e-n.a.x))/(i*o-u*r),y=(a+u*c-s)/o;return y<0||c<0||c>1?null:{x:e+r*y,y:s+o*y,param:y}}emit(t,n){const e=[];for(let s=0;s<this.uniquePoints.length;s++){const r=this.uniquePoints[s],o=Math.atan2(r.y-n,r.x-t);e.push(o-1e-4,o,o+1e-4)}const s=[];for(let r=0;r<e.length;r++){const o=e[r],a=this.createRay(t,n,o);let i=null;for(let t=0;t<this.segments.length;t++){const n=this.getIntersection(a,this.segments[t]);n&&(!i||n.param<i.param)&&(i=n)}i&&(i.angle=o,s.push(i))}return s.sort((t,n)=>t.angle-n.angle)}}function a(t){return new o(t)}function i(t,n,e,s){return{a:{x:t,y:n},b:{x:e,y:s}}}export{a as createRaycaster,i as createSegment};
//# sourceMappingURL=raycast.modern.js.map
