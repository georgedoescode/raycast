{"version":3,"file":"raycast.cjs","sources":["../node_modules/@georgedoescode/vector2d/dist/esm/index.js","../lib/boundary.js","../lib/ray.js","../lib/emitter.js"],"sourcesContent":["class Vector2D {\n  constructor(x = 0, y = 0, z = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  static add(v1, v2) {\n    return v1.copy().add(v2.copy());\n  }\n  static rem(v1, v2) {\n    return v1.copy().rem(v2.copy());\n  }\n  static sub(v1, v2) {\n    return v1.copy().sub(v2.copy());\n  }\n  static mult(v1, v2) {\n    return v1.copy().mult(v2.copy());\n  }\n  static div(v1, v2) {\n    return v1.copy().div(v2.copy());\n  }\n  static dot(v1, v2) {\n    return v1.copy().dot(v2.copy());\n  }\n  static dist(v1, v2) {\n    return v1.copy().dist(v2.copy());\n  }\n  static lerp(v1, v2, amt) {\n    return v1.copy().lerp(v2.copy().x, v2.copy().y, amt);\n  }\n  static rotate(v1, amt) {\n    return v1.copy().rotate(amt);\n  }\n  static angle(v1, v2) {\n    return Math.atan2(v2.copy().y - v1.copy().y, v2.copy().x - v1.copy().x);\n  }\n  static fromAngle(angle, length = 1) {\n    return new Vector2D(length * Math.cos(angle), length * Math.sin(angle), 0);\n  }\n  set(x, y) {\n    const values = this._formatArgs(x, y);\n    this.x = values.x;\n    this.y = values.y;\n    return this;\n  }\n  copy() {\n    return new Vector2D(this.x, this.y);\n  }\n  toArray() {\n    return [this.x, this.y];\n  }\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  }\n  add(x, y) {\n    const values = this._formatArgs(x, y);\n    this.x += values.x;\n    this.y += values.y;\n    return this;\n  }\n  rem(x, y) {\n    const values = this._formatArgs(x, y);\n    this.x = this.x % values.x;\n    this.y = this.y % values.y;\n    return this;\n  }\n  sub(x, y) {\n    const values = this._formatArgs(x, y);\n    this.x -= values.x;\n    this.y -= values.y;\n    return this;\n  }\n  mult(x, y) {\n    const values = this._formatArgs(x, y);\n    this.x *= values.x;\n    this.y *= values.y;\n    return this;\n  }\n  div(x, y) {\n    const values = this._formatArgs(x, y);\n    this.x /= values.x;\n    this.y /= values.y;\n    return this;\n  }\n  mag() {\n    return Math.sqrt(this.magSq());\n  }\n  magSq() {\n    const x = this.x;\n    const y = this.y;\n    return x * x + y * y;\n  }\n  dot(x, y) {\n    const values = this._formatArgs(x, y);\n    return this.x * values.x + this.y * values.y;\n  }\n  dist(v) {\n    return v.copy().sub(this).mag();\n  }\n  normalize() {\n    const len = this.mag();\n    if (len !== 0)\n      this.mult(1 / len);\n    return this;\n  }\n  limit(max) {\n    const mSq = this.magSq();\n    if (mSq > max * max) {\n      this.div(Math.sqrt(mSq)).mult(max);\n    }\n    return this;\n  }\n  setMag(n) {\n    return this.normalize().mult(n);\n  }\n  heading() {\n    return Math.atan2(this.y, this.x);\n  }\n  rotate(a) {\n    let newHeading = this.heading() + a;\n    const mag = this.mag();\n    this.x = Math.cos(newHeading) * mag;\n    this.y = Math.sin(newHeading) * mag;\n    return this;\n  }\n  lerp(x, y, amt) {\n    this.x += (x - this.x) * amt;\n    this.y += (y - this.y) * amt;\n    return this;\n  }\n  cross(v) {\n    const x = this.y * v.z - this.z * v.y;\n    const y = this.z * v.x - this.x * v.z;\n    const z = this.x * v.y - this.y * v.x;\n    return new Vector2D(x, y, z);\n  }\n  _formatArgs(x, y) {\n    if (x.x && x.y) {\n      return new Vector2D(x.x, x.y);\n    }\n    if (!y)\n      y = x;\n    return new Vector2D(x, y);\n  }\n}\nfunction createVector(x, y) {\n  return new Vector2D(x, y);\n}\nexport {\n  Vector2D,\n  createVector\n};\n","import { createVector } from '@georgedoescode/vector2d';\n\nclass Boundary {\n  constructor(x1, y1, x2, y2) {\n    this.a = createVector(x1, y1);\n    this.b = createVector(x2, y2);\n  }\n}\n\nfunction createBoundary(x1, y1, x2, y2) {\n  return new Boundary(x1, y1, x2, y2);\n}\n\nexport { createBoundary };\n","import { createVector, Vector2D } from '@georgedoescode/vector2d';\n\nclass Ray {\n  constructor(position, angle) {\n    this.position = position;\n    this.dir = Vector2D.fromAngle(angle);\n  }\n\n  cast(boundary) {\n    const x1 = boundary.a.x;\n    const y1 = boundary.a.y;\n    const x2 = boundary.b.x;\n    const y2 = boundary.b.y;\n\n    const x3 = this.position.x;\n    const y3 = this.position.y;\n    const x4 = this.position.x + this.dir.x;\n    const y4 = this.position.y + this.dir.y;\n\n    const d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n    if (d === 0) return null;\n\n    const t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / d;\n    const u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / d;\n\n    if (t > 0 && t < 1 && u > 0) {\n      return createVector(x1 + t * (x2 - x1), y1 + t * (y2 - y1));\n    } else {\n      return null;\n    }\n  }\n}\n\nfunction createRay(x, y) {\n  return new Ray(x, y);\n}\n\nexport { createRay };\n","import { createVector, Vector2D } from '@georgedoescode/vector2d';\nimport { createRay } from './ray';\n\nclass Emitter {\n  constructor(x, y, numRays = 32) {\n    this.position = new createVector(x, y);\n    this.rays = [];\n\n    for (let a = 0; a < 360; a += 360 / numRays) {\n      this.rays.push(createRay(this.position, a * (Math.PI / 180.0)));\n    }\n  }\n\n  updatePosition(x, y) {\n    this.position.set(x, y);\n  }\n\n  emit(boundaries) {\n    const intersectionPoints = [];\n\n    for (const ray of this.rays) {\n      let closest = null;\n      let record = Infinity;\n\n      for (let boundary of boundaries) {\n        const pt = ray.cast(boundary);\n\n        if (pt) {\n          const d = Vector2D.dist(this.position, pt);\n\n          if (d < record) {\n            record = d;\n            closest = pt;\n          }\n        }\n      }\n\n      if (closest) {\n        intersectionPoints.push({\n          x: closest.x,\n          y: closest.y,\n        });\n      }\n    }\n\n    return intersectionPoints;\n  }\n}\n\nfunction createEmitter(x, y, numRays) {\n  return new Emitter(x, y, numRays);\n}\n\nexport { createEmitter };\n"],"names":["Vector2D","constructor","x","y","z","this","static","v1","v2","copy","add","rem","sub","mult","div","dot","dist","amt","lerp","rotate","Math","atan2","angle","length","cos","sin","set","values","_formatArgs","toArray","toObject","mag","sqrt","magSq","v","normalize","len","limit","max","mSq","setMag","n","heading","a","newHeading","cross","createVector","Boundary","x1","y1","x2","y2","b","Ray","position","dir","fromAngle","cast","boundary","x3","y3","x4","y4","d","t","createRay","Emitter","numRays","rays","push","PI","updatePosition","emit","boundaries","_step","intersectionPoints","_iterator","_createForOfIteratorHelperLoose","done","ray","_step2","value","record","Infinity","_iterator2","pt","closest"],"mappings":"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"}