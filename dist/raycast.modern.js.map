{"version":3,"file":"raycast.modern.js","sources":["../node_modules/line-intersect/es/check-intersection.js","../lib/index.js"],"sourcesContent":["var COLINEAR = intersectResult('colinear');\nvar PARALLEL = intersectResult('parallel');\nvar NONE = intersectResult('none');\n/**\n* Check how two line segments intersect eachother. Line segments are represented\n* as (x1, y1)-(x2, y2) and (x3, y3)-(x4, y4).\n*\n* @param {number} x1\n* @param {number} y1\n* @param {number} x2\n* @param {number} y2\n* @param {number} x3\n* @param {number} y3\n* @param {number} x4\n* @param {number} y4\n* @return {object} Object describing intersection that looks like\n*    {\n*      type: none|parallel|colinear|intersecting,\n*      point: {x, y} - only defined when type == intersecting\n*    }\n*/\n\nexport function checkIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {\n  var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n  var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n  var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n\n  if (denom == 0) {\n    if (numeA == 0 && numeB == 0) {\n      return COLINEAR;\n    }\n\n    return PARALLEL;\n  }\n\n  var uA = numeA / denom;\n  var uB = numeB / denom;\n\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    return intersecting({\n      x: x1 + uA * (x2 - x1),\n      y: y1 + uA * (y2 - y1)\n    });\n  }\n\n  return NONE;\n}\n\nfunction intersecting(point) {\n  var result = intersectResult('intersecting');\n  result.point = point;\n  return result;\n}\n\nfunction intersectResult(type) {\n  return {\n    type: type\n  };\n}","import { checkIntersection } from 'line-intersect';\n\nclass Raycaster {\n  constructor(segments) {\n    this.uniquePoints = [];\n    this.uniqueAngles = [];\n\n    this.setSegments(segments);\n  }\n\n  setSegments(segments) {\n    const uniquePoints = segments.reduce((arr, curr) => {\n      for (const point of Object.values(curr)) {\n        if (!arr.some((p) => p.x === point.x && p.y === point.y)) {\n          arr.push(curr.a, curr.b);\n        }\n      }\n\n      return arr;\n    }, []);\n\n    const intersections = segments.reduce((acc, curr) => {\n      for (const segment of segments) {\n        const intersection = checkIntersection(\n          curr.a.x,\n          curr.a.y,\n          curr.b.x,\n          curr.b.y,\n          segment.a.x,\n          segment.a.y,\n          segment.b.x,\n          segment.b.y\n        );\n\n        if (\n          intersection.type === 'intersecting' &&\n          !acc.some(\n            (i) => i.x === intersection.point.x && i.y !== intersection.point.y\n          )\n        ) {\n          acc.push({ x: intersection.point.x, y: intersection.point.y });\n        }\n      }\n\n      return acc;\n    }, []);\n\n    this.uniquePoints = [...intersections, ...uniquePoints];\n    this.segments = segments;\n  }\n\n  createRay(x, y, angle) {\n    const dx = Math.cos(angle);\n    const dy = Math.sin(angle);\n\n    return {\n      a: { x: x, y: y },\n      b: { x: x + dx, y: y + dy },\n    };\n  }\n\n  getIntersection(ray, segment) {\n    const r_px = ray.a.x;\n    const r_py = ray.a.y;\n    const r_dx = ray.b.x - ray.a.x;\n    const r_dy = ray.b.y - ray.a.y;\n\n    const s_px = segment.a.x;\n    const s_py = segment.a.y;\n    const s_dx = segment.b.x - segment.a.x;\n    const s_dy = segment.b.y - segment.a.y;\n\n    if (r_dx * s_dy === r_dy * s_dx) {\n      return null;\n    }\n\n    const T2 =\n      (r_dx * (s_py - r_py) + r_dy * (r_px - s_px)) /\n      (s_dx * r_dy - s_dy * r_dx);\n    const T1 = (s_py + s_dy * T2 - r_py) / r_dy;\n\n    if (T1 < 0) return null;\n    if (T2 < 0 || T2 > 1) return null;\n\n    return {\n      x: r_px + r_dx * T1,\n      y: r_py + r_dy * T1,\n      param: T1,\n    };\n  }\n\n  emit(x, y) {\n    const uniqueAngles = [];\n\n    for (let i = 0; i < this.uniquePoints.length; i++) {\n      const point = this.uniquePoints[i];\n\n      const angle = Math.atan2(point.y - y, point.x - x);\n\n      uniqueAngles.push(angle - 0.0001, angle, angle + 0.0001);\n    }\n\n    const intersects = [];\n\n    for (let i = 0; i < uniqueAngles.length; i++) {\n      const angle = uniqueAngles[i];\n\n      const ray = this.createRay(x, y, angle);\n\n      let closestIntersect = null;\n\n      for (let j = 0; j < this.segments.length; j++) {\n        const segment = this.segments[j];\n\n        const intersect = this.getIntersection(ray, segment);\n\n        if (!intersect) continue;\n\n        if (!closestIntersect || intersect.param < closestIntersect.param) {\n          closestIntersect = intersect;\n        }\n      }\n\n      if (!closestIntersect) continue;\n      closestIntersect.angle = angle;\n\n      intersects.push(closestIntersect);\n    }\n\n    return intersects.sort((a, b) => {\n      return a.angle - b.angle;\n    });\n  }\n}\n\nfunction createRaycaster(segments) {\n  return new Raycaster(segments);\n}\n\nfunction createSegment(x1, y1, x2, y2) {\n  return {\n    a: {\n      x: x1,\n      y: y1,\n    },\n    b: {\n      x: x2,\n      y: y2,\n    },\n  };\n}\n\nexport { createRaycaster, createSegment };\n"],"names":["COLINEAR","intersectResult","PARALLEL","NONE","checkIntersection","x1","y1","x2","y2","x3","y3","x4","y4","denom","numeA","numeB","point","result","uA","uB","x","y","type","Raycaster","constructor","segments","this","uniquePoints","uniqueAngles","setSegments","reduce","arr","curr","Object","values","some","p","push","a","b","intersections","acc","segment","intersection","i","createRay","angle","Math","cos","sin","getIntersection","ray","r_px","r_py","s_py","s_dx","r_dx","s_dy","r_dy","T1","T2","param","emit","length","atan2","intersects","closestIntersect","j","intersect","sort","createRaycaster","createSegment"],"mappings":"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"}