{"version":3,"file":"raycast.module.js","sources":["../node_modules/line-intersect/es/check-intersection.js","../lib/index.js"],"sourcesContent":["var COLINEAR = intersectResult('colinear');\nvar PARALLEL = intersectResult('parallel');\nvar NONE = intersectResult('none');\n/**\n* Check how two line segments intersect eachother. Line segments are represented\n* as (x1, y1)-(x2, y2) and (x3, y3)-(x4, y4).\n*\n* @param {number} x1\n* @param {number} y1\n* @param {number} x2\n* @param {number} y2\n* @param {number} x3\n* @param {number} y3\n* @param {number} x4\n* @param {number} y4\n* @return {object} Object describing intersection that looks like\n*    {\n*      type: none|parallel|colinear|intersecting,\n*      point: {x, y} - only defined when type == intersecting\n*    }\n*/\n\nexport function checkIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {\n  var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n  var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n  var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n\n  if (denom == 0) {\n    if (numeA == 0 && numeB == 0) {\n      return COLINEAR;\n    }\n\n    return PARALLEL;\n  }\n\n  var uA = numeA / denom;\n  var uB = numeB / denom;\n\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    return intersecting({\n      x: x1 + uA * (x2 - x1),\n      y: y1 + uA * (y2 - y1)\n    });\n  }\n\n  return NONE;\n}\n\nfunction intersecting(point) {\n  var result = intersectResult('intersecting');\n  result.point = point;\n  return result;\n}\n\nfunction intersectResult(type) {\n  return {\n    type: type\n  };\n}","import { checkIntersection } from 'line-intersect';\n\nclass Raycaster {\n  constructor(segments) {\n    this.uniquePoints = [];\n    this.uniqueAngles = [];\n\n    this.setSegments(segments);\n  }\n\n  setSegments(segments) {\n    const uniquePoints = segments.reduce((arr, curr) => {\n      for (const point of Object.values(curr)) {\n        if (!arr.some((p) => p.x === point.x && p.y === point.y)) {\n          arr.push(curr.a, curr.b);\n        }\n      }\n\n      return arr;\n    }, []);\n\n    const intersections = segments.reduce((acc, curr) => {\n      for (const segment of segments) {\n        const intersection = checkIntersection(\n          curr.a.x,\n          curr.a.y,\n          curr.b.x,\n          curr.b.y,\n          segment.a.x,\n          segment.a.y,\n          segment.b.x,\n          segment.b.y\n        );\n\n        if (\n          intersection.type === 'intersecting' &&\n          !acc.some(\n            (i) => i.x === intersection.point.x && i.y !== intersection.point.y\n          )\n        ) {\n          acc.push({ x: intersection.point.x, y: intersection.point.y });\n        }\n      }\n\n      return acc;\n    }, []);\n\n    this.uniquePoints = [...intersections, ...uniquePoints];\n    this.segments = segments;\n  }\n\n  createRay(x, y, angle) {\n    const dx = Math.cos(angle);\n    const dy = Math.sin(angle);\n\n    return {\n      a: { x: x, y: y },\n      b: { x: x + dx, y: y + dy },\n    };\n  }\n\n  getIntersection(ray, segment) {\n    const r_px = ray.a.x;\n    const r_py = ray.a.y;\n    const r_dx = ray.b.x - ray.a.x;\n    const r_dy = ray.b.y - ray.a.y;\n\n    const s_px = segment.a.x;\n    const s_py = segment.a.y;\n    const s_dx = segment.b.x - segment.a.x;\n    const s_dy = segment.b.y - segment.a.y;\n\n    if (r_dx * s_dy === r_dy * s_dx) {\n      return null;\n    }\n\n    const T2 =\n      (r_dx * (s_py - r_py) + r_dy * (r_px - s_px)) /\n      (s_dx * r_dy - s_dy * r_dx);\n    const T1 = (s_py + s_dy * T2 - r_py) / r_dy;\n\n    if (T1 < 0) return null;\n    if (T2 < 0 || T2 > 1) return null;\n\n    return {\n      x: r_px + r_dx * T1,\n      y: r_py + r_dy * T1,\n      param: T1,\n    };\n  }\n\n  emit(x, y) {\n    const uniqueAngles = [];\n\n    for (let i = 0; i < this.uniquePoints.length; i++) {\n      const point = this.uniquePoints[i];\n\n      const angle = Math.atan2(point.y - y, point.x - x);\n\n      uniqueAngles.push(angle - 0.0001, angle, angle + 0.0001);\n    }\n\n    const intersects = [];\n\n    for (let i = 0; i < uniqueAngles.length; i++) {\n      const angle = uniqueAngles[i];\n\n      const ray = this.createRay(x, y, angle);\n\n      let closestIntersect = null;\n\n      for (let j = 0; j < this.segments.length; j++) {\n        const segment = this.segments[j];\n\n        const intersect = this.getIntersection(ray, segment);\n\n        if (!intersect) continue;\n\n        if (!closestIntersect || intersect.param < closestIntersect.param) {\n          closestIntersect = intersect;\n        }\n      }\n\n      if (!closestIntersect) continue;\n      closestIntersect.angle = angle;\n\n      intersects.push(closestIntersect);\n    }\n\n    return intersects.sort((a, b) => {\n      return a.angle - b.angle;\n    });\n  }\n}\n\nfunction createRaycaster(segments) {\n  return new Raycaster(segments);\n}\n\nfunction createSegment(x1, y1, x2, y2) {\n  return {\n    a: {\n      x: x1,\n      y: y1,\n    },\n    b: {\n      x: x2,\n      y: y2,\n    },\n  };\n}\n\nexport { createRaycaster, createSegment };\n"],"names":["COLINEAR","intersectResult","PARALLEL","NONE","type","segments","this","uniquePoints","uniqueAngles","setSegments","reduce","arr","curr","_loop","_Object$values","_i","some","p","x","point","y","push","a","b","Object","values","length","acc","segment","intersection","x1","y1","x2","y2","x3","y3","x4","y4","denom","numeA","numeB","result","uA","uB","checkIntersection","i","_loop2","concat","intersections","createRay","angle","Math","cos","sin","getIntersection","ray","r_px","r_py","s_py","r_dx","s_dy","r_dy","s_dx","T1","T2","param","emit","atan2","intersects","closestIntersect","j","intersect","sort","createRaycaster","Raycaster","createSegment"],"mappings":"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"}